[ 1.0.0 -- TBD -- ]
-------------------
- Disallow changing the signal of an event within a handle.
- Moved the complex signals into a deeper namespacing scheme
- Added the prggmr\signal\http\Request signal.
- All API functions now fall into the prggmr namespace.

[ 0.3.1.1 041012 ]
------------------
- Added the composer.json file
- prggmr bin now supports the -p, --passthru option

[ 0.3.1 041012 ]
------------------
- The engine now generates and stores an event concurrently for recurring 
  complex signals.
- Event properties reference themselves correctly.
- Read-Only event properties now throw a LogicException if written to.

[ 0.3.0 04032012 ]
------------------
- Added the engine_code utility function
- All methods use the underscore seperator for words
- Events now contain a history of all signals they have represented
- Events now contain a reference to a parent if signal within another event
- Engine now stores a running history of events that have taken place
- Event::isChild, signals, addSignal, parent methods added
- Added Engine::history method
- Removed handle post/pre execution functions
- Removed handle identifier
- Renamed \prggmr\signal\Regex to \prggmr\signal\Query
- Added \prggmr\signal\Standard abstract class
- Removed SignalInterface
- Removed chains entirely
- Event properties can now be set as read-only
- \prggmr\signal\Complex::evaluate, routine abstract method added
- \prggmr\signal\Complex is now abstract
- Added \prggmr\Engine::_searchComplex
- \prggmr\Engine::queue renamed to \prggmr\Engine::sigHandler
- \prggmr\Engine::queue now uses binary searching for finding queues
- \prggmr\Engine::queue now returns an array
- \prggmr\Engine::queue params changed to ($signal, $type)
- Regex and ArrayContains now extend \prggmr\Signal\Complex
- Moved \prggmr\SignalInterface to \prggmr\signal\SignalInterface
- Added \prggmr\signal\Complex class
- Queue uses Storage trait
- Added bin_search function
- Added Storage trait
- Queue can now be set as min or max upon construction
- Added constants QUEUE_MIN_HEAP, QUEUE_MAX_HEAP
- The State class is now a Trait
- PHP 5.4 is now required
- AUTHORS is now CREDITS
- Added \prggmr\engine\Signal::GLOBAL_EXCEPTION and GLOBAL_ERROR constants.
- Added signal_exceptions and signal_errors functions
- Queue no longer requires a Handle object for enqueue
- Added Queue::offsetSet, offsetUnset methods
- A Queue will now throw a OverflowException if QUEUE_MAX_SIZE is exceeded
- Added QUEUE_MAX_SIZE constant
- Added get_milliseconds function
- Added utils.php file
- Removed Engine::getMilliseconds method
- Added Queue::_data property and Queue::getRepresentation method
- Removed Queue::getSignal method, Queue::_signal property
- Engine::canIndex has been moved into the Signal::canIndex.
- Removed Engine::canIndex method.
- Added Handle::__invoke magic method, this throws a BadMethodCallException
  to disallow directly invoking a handle and requiring use of execute.
- Added Event::__unset, __get, __set and __isset magic methods.
- Removed Event::getData, Event::setData methods.
- Event now uses overloading for setting and getting any data.
- Removed Event::halt, Event::isHalted methods and Event::_halt property
- ArrayContainsSignal can now be set to strict mode on construction
- Removed ArrayContainsSignalStrict class
- Event now extends State class
- Engine now extends State class
- Improved LOG formatting
- Removed Event::state_message property
- Removed Event::getStateMessage, Event::setStateMessage
- Added Engine properties active_signal, active_handle
- Events no longer carry a reference to the signal or handle in 
  execution.
- Added state constants (DECLARED, RUNNING, EXITED, ERROR, RECYCLED, HALTED)
- Removed Event states (ACTIVE, ERRROR, INACTIVE)
- \prggmr\engine\Signals::HANDLE_EXCEPTION signal is signaled when an Exception
  is encountered during Handle execution.
- \prggmr\engine\Signals class added
- Engine::_fire renamed to Engine::_execute
- Signal::delChain renamed to Signal::removeChain
- Handle::fire renamed to Handle::execute
- Queue::_prioritize now calls flush.
- Modified doc block comments.
- Subscriptions are now refereed to as handles.
- Added prggmr\handle\Time class.
- Subscription class renamed to Handle.
- once api function renamed to handle_once.
- fire api function renamed to signal.
- subscribe api function renamed to handle.

[ 0.2.2 01112012 ]
------------------
- Fixed a bug causing a Fatal Error when the Event was removed from the arguments.
  within a Subscription, this now throws a RuntimeException when encountered.
- Added signals/ directory all files are included automatically.
- Regex Signal was removed from signals.php file.
- API functions now have the ability to be replaced before loading the API.
- prggmrd bin file renamed to prggmr

[ 0.2.1 12192011 ]
------------------
- Subscription Exceptions contain the file/line and message of the exception.
- Event::getData now returns null instead of false if the data does not exist.
- Timeouts and intervals can now be set to start at a pre determined time
- Added PRGGMR_EVENTED_ERRORS constant which allows enabling prggmr's evented
  exceptions.
- Added prggmr::EXCEPTION constant used for prggmr's evented exceptions.
- Added PRGGMRUNIT_MASTERMIND constant.
- Prggmr is now defined as prggmr (lowercase).
- Subscriptions now throw a SubscriptionException if an error is encountered.
- Multiple Signals can now be triggered upon a single fire
- added the prggmrd bin file
- timeout/interval set methods now return the subscription
- Moved SignalInterface and RegexSignal into the signal.php file ... each class
  was very small and it keeps the lib a little tidier.
- Added pre and post fire events to subscriptions
- Returned event data is now added to the event data as the "return" key.
- Errors encountered in daemon mode first try to remove timer then queue signal
  subscription
- clearInterval now returns false if a interval isnt cleared

[ 0.2.0 07092011 ]
------------------
- Added PRGGMR_DEBUG constant
- Added the "getSignal()" method to Event which returns the Event Signal object
- Added a key parameter to Event::getData to allow for direct data access
- Fixed a bug in the Queue which caused errors when using E_STRICT @alkavan
- Subcription fires are now handled via an internal engine fire
  which is used for both timed and subscribed events.
- Added countTimers method to Engine
- Added shutdown method to Engine
- Added Engine daemon mode which allows an engine to run as a daemon
- Added Engine states (RUNNING, ERROR, DAEMON)
- Added getState method to Engine
- Added setInterval, setTimeout, clearInterval, clearTimeout methods to Engine
- Removed Adapter and AdapterInterface
- Added chain, dechain, once API functions
- Engine->subscribe() param list changed to signal, subscription, identifier,
  priority, chain, exhaust.
- Signal->getChain() now returns an array or null
- Event->getChain() now returns an array or null
- Chains are now stored as array to allow for unlimited chains within a signal
- Prggmr class added
- Engine no longer implements a singleton
- Added Server class
- Engine now removes exhausted events.
- Added subscription exhaustion.

[ 0.1.2 06212011 ]
------------------
- Engine no longer uses an SplObjectStorage for queue storage
- Added _indexStorage and _storage arrays to engine, these are used for queue
  storage

[ 0.1.1 05302011 ]
------------------
- Added the SignalInterface interface
- Added the Signal object
- Added the Subscription object
- Added the Queue object
- Removed benchmark utility
- Removed data object
- Removed functions file
- Removed the autoloaders
- Removed all logic code from adapter, adapter now acts only as an interface to
  the engine.
- Renamed Listenable class to Adapter
- Adapter implements new Engine api
- AdapterInterface implements new Engine api
- Engine object is now a singleton
- Engine object rewritten
- Queue and Engine now use a SplObjectStorage rather than an array
- Event object no longer supplies the event chain, rather is supplied a chained
  event
- Event chains are now added through a signal
- Signal object added
- Queue object added implemented as a SplObjectStorage with priority in a queue
  (LIFO) by default
- bubble method renamed to fire
- prggmr object renamed to engine
- All Unittests rewritten
- Event is no longer a child of Adapter
- RegexSignal object added which supports event naming of "hello/:world" and any
  regex string
- New api implemented (fire, subscribe) removed benchmark, bubble

[ 0.1.0 03092011 ]
------------------
- Inital Release

[ 0.0.0 11112010 ]
------------------
- It begins