#!/usr/bin/env php
<?php
/**
 * Directly runs files in the prggmr event loop
 */
$usage = 
"usage: prggmr [-c|--config=<file>][-h|--help][-p|--passthru][--test]
              [--test-cover][-t|--time=<time>][-v|--version]
              <file>
Options:
  -c/--config   Load the giving file for configuration
  -h/--help     Show this help message.
  -p/--passthru Ignore any subsequent arguments and pass to <file>.
  --test        Run the prggmr unit tests.
  --test-cover  Run unit tests and generate code coverage.
  -t/--time     Run for the given amount of milliseconds.
  -v/--version  Displays current prggmr version.
";

$sync = false;
$ttr = null;
$runfile = false;
$it = true;
if (count($argv) === 0) {
    goto start;
}
// last param is file
$runfile = $argv[$argc - 1];
// if - is first char ignore file
if (strpos($runfile, '-') === 0) {
    $runfile = false;
}

if ($runfile != false) {
    $runfile = false;
}

$options = getopt(
    'qwert:yuiopasdfghjklzxc:vbnm',
    [
        'help', 'config:', 'version', 'time:', 'test', 'test-cover'
    ]
);
$tmp = $argv;
$unittesting = false;
$coverage = false;
// parse args and check for options
foreach ($options as $_i => $_arg) {
    // Hack
    $break = false;
    switch ($_i) {
        case 'p':
        case 'passthru':
            $break = true;
            break;
        case 't':
        case 'time':
            if (false === $_arg || !is_int($_arg + 0)) {
                exit("invalid option 't'\n".$usage);
            }
            $ttr = $_arg + 0;
            break;
        case 'h':
        case 'help':
            exit($usage);
            break;
        case 'v':
        case 'version':
            $showversion = true;
            break;
        case 'c':
        case 'config':
            include($_arg);
            break;
        case 'd':
            define('PRGGMR_DEV_MODE', true);
            break;
        case 'test':
        case 'test-cover':
            $unittest = true;
            if (!defined('PRGGMR_DEBUG')) {
                define('PRGGMR_DEBUG', true);
            }
            if ($_i === 'test-cover') {
                define('GENERATE_CODE_COVERAGE', true);
            }
            $it = false;
            break;
        default:
            exit(sprintf(
                "Unknown option '%s'\n%s",
                $_i,
                $usage
            ));
            break;
    }
    if ($break) break;
}

start:

// load prggmr
if (!class_exists('prggmr')) {
    require_once dirname(realpath(__FILE__)).'/../src/prggmr.php';
}

if (isset($showversion)) {
    echo 'prggmr version '.PRGGMR_VERSION.PHP_EOL;
    echo PRGGMR_MASTERMIND.PHP_EOL;
    exit(0);
}

if (isset($unittest)) {
    prggmr\load_module('unittest');
    require PRGGMR_PATH.'/tests/run.php';
}

if (false !== $runfile) {
    if (!file_exists($runfile)) {
        die("Could not open $runfile\n");
    } else {
        require_once $runfile;
    }
} else if ($it) {
    prggmr\load_module('socket');
    $stdin = prggmr\socket(STDIN, ['address' => AF_UNIX], function(){
        $this->socket->write('~> ');
    });
    $stdin->on_read(function(){
        ob_start();
        eval($this->socket->read());
        $content = ob_get_contents();
        ob_end_clean();
        $this->socket->write($content);
        $this->socket->write('~> ');
    });
}

// start the loop!!
prggmr\loop($ttr);
