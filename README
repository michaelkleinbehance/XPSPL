prggmr is an event processing engine for PHP 5.4. designed to be lightweight, 
fast and very simple to use.

## Usage

    <?php

    handle(function(){
        echo "The light is green go!";
    }, 'light.green');

    handle(function(){
        echo "The light is red stop!";
    }, 'light.red');

    handle(function(){
        echo "The light is yellow go faster!";
    } 'light.yellow');

    signal('light.green');
    signal('light.yellow');
    signal('light.red');

## Installation

Depending on your needs prggmr can be installed using two different methods.

### Composer

Include the following in your ```composer.json``` file.

    {
        "require": {
            "prggmr/prggmr": "0.3.*"
        }
    }

Run the installer.

    php composer.phar install

And include the library

    require_once 'vendor/prggmr/prggmr/src/prggmr.php';

### Global system installation

This method will install prggmr to your php include path.

Download the latest release and navigate a terminal to the extract directory.

    # cd into the prggmr library so you see the README, LICENSE etc..
    cd path/to/prggmr/extraction
    # Get include path
    php -r "echo get_include_path();"
    # My output .:/usr/local/lib/php
    # Copy prggmr to lib
    sudo cp -Rf * /usr/local/lib/php/prggmr/*
    # Copy bin
    sudo ln -ls /usr/local/lib/php/prggmr/bin/prggmr /usr/bin/
    # Test
    prggmr -v
    # Result
    prggmr version 0.3.1.1

## Documentation

Documentation is available at [prggmr.org](http://www.prggmr.org)

## Mailing List

The prggmr mailing list is located here [mailing list](https://groups.google.com/forum/?fromgroups#!forum/prggmr).


## Signals Roadmap

The following signals are on the development roadmap.

### Event Stream Server

W3C Event-Stream (Specs)[http://dev.w3.org/html5/eventsource/].

#### Example

    $socket = new \prggmr\signal\http\EventStream();

    handle(function($bytes){
        // do something
    }, $socket->read());

    handle(function($bytes){
        // do something
    }, $socket->write());

### Non-Blocking Asynchronous Signal I/O

This will allow for non-blocking event driven I/O using file descriptors or 
networking socktes.

#### Example
    
    <?php

    $socket = new \prggmr\signal\io\Socket('127.0.0.1', 8888);

    handle(function($bytes){
        echo "Read bytes";
        echo $bytes;
    }, $socket->read(1024));

    handle(function($bytes){
        echo "Writing bytes";
        echo $bytes;
    }, $socket->write());

    handle(function($client){
        echo "Client connected";
        echo $client->ip_address;
    }, $socket->connect());

    handle(function($client){
        echo "Client disconnected";
        echo $client->ip_address;
    }, $socket->disconnect());

Or something like that ...